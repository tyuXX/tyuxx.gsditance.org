name: Submodule Management

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 * * * *'  # Run hourly

jobs:
  manage-submodules:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the main repository, including submodules
      - name: Check out repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      # Step 2: Update all submodules
      - name: Update submodules
        run: |
          # Loop through each submodule and pull all branches
          git submodule foreach --recursive "
            echo 'Updating \$name in \$sm_path';
            git fetch --all;
            
            # Check if we're in a detached HEAD state and checkout the main branch
            if [ -z \"\$(git symbolic-ref --short HEAD 2>/dev/null)\" ]; then
              echo 'Detached HEAD detected, checking out main branch';
              git checkout main || git checkout master;
            fi;
            
            # Pull the latest changes
            git pull;
          "

      # Step 3: Generate JSON file with submodule information
      - name: Generate submodule information JSON
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Initialize an empty JSON array
          echo '[]' > submodules.json
          
          # Get the owner/organization name from the repository URL
          owner=$(git config --get remote.origin.url | sed -n 's/.*github.com[:\/]\([^\/]*\)\/.*/\1/p')
          
          # Loop through each submodule
          while IFS= read -r line; do
            path=$(echo "$line" | awk '{print $2}')
            [ -z "$path" ] && continue
            
            url=$(git config --file .gitmodules --get "submodule.$path.url")
            [ -z "$url" ] && continue
            
            repo=$(basename "$url" .git)
            github_url="https://github.com/$owner/$repo"
            
            if ! cd "$path" 2>/dev/null; then
              echo "Warning: Could not access submodule directory $path"
              continue
            fi
            
            # Get commit information
            if ! last_commit_hash=$(git rev-parse HEAD 2>/dev/null); then
              echo "Warning: Could not get commit hash for $path"
              cd - > /dev/null
              continue
            fi
            
            # Get commit message and escape it properly
            last_commit_message=$(git log -1 --pretty=%B 2>/dev/null || echo "No commit message")
            last_commit_message=$(echo "$last_commit_message" | jq -R . | jq -s -c '. | join("")')
            
            # Get dates
            last_commit_date=$(git log -1 --format=%cd --date=iso 2>/dev/null || echo "Unknown")
            last_updated=$(git log -1 --format=%cd --date=iso 2>/dev/null || echo "Unknown")
            
            # Get README content safely
            if [ -f "README.md" ] && [ -s "README.md" ]; then
              readme_content=$(cat README.md | jq -R . | jq -s -c '. | join("\n")')
            elif [ -f "README" ] && [ -s "README" ]; then
              readme_content=$(cat README | jq -R . | jq -s -c '. | join("\n")')
            else
              readme_content="\"No README available\""
            fi
            
            cd - > /dev/null
            
            # Get repository description safely
            repo_info=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$owner/$repo")
            description=$(echo "$repo_info" | jq -r '.description // "No description available"')
            description=$(echo "$description" | jq -R . | jq -s -c '. | join("")')
            
            # Create entry using jq to ensure proper JSON formatting
            jq --arg path "$path" \
               --arg desc "$description" \
               --arg url "$github_url" \
               --arg hash "$last_commit_hash" \
               --arg msg "$last_commit_message" \
               --arg date "$last_commit_date" \
               --arg updated "$last_updated" \
               --arg readme "$readme_content" \
               -n '{
                 name: $path,
                 description: ($desc | fromjson),
                 githubUrl: $url,
                 lastCommit: {
                   hash: $hash,
                   message: ($msg | fromjson),
                   date: $date,
                   url: ($url + "/commit/" + $hash)
                 },
                 lastUpdated: $updated,
                 readme: ($readme | fromjson)
               }' > temp_entry.json
            
            # Merge with existing JSON array
            jq -s '.[0] + [.[1]]' submodules.json temp_entry.json > temp_submodules.json && \
            mv temp_submodules.json submodules.json
            
            rm -f temp_entry.json
            
          done < <(git config --file .gitmodules --get-regexp path)

      # Step 4: Commit and push all changes
      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add submodules.json
          git add .
          git commit -m "Update submodules and submodule information" || echo "No changes to commit"
          git push origin main
